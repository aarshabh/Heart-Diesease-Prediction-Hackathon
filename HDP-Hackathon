{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7e9e277",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:50.994591Z",
     "iopub.status.busy": "2021-11-28T10:18:50.992788Z",
     "iopub.status.idle": "2021-11-28T10:18:51.014310Z",
     "shell.execute_reply": "2021-11-28T10:18:51.014974Z",
     "shell.execute_reply.started": "2021-11-28T10:18:08.843090Z"
    },
    "papermill": {
     "duration": 0.06027,
     "end_time": "2021-11-28T10:18:51.015279",
     "exception": false,
     "start_time": "2021-11-28T10:18:50.955009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/heart-disease-uci/heart.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fe18d15",
   "metadata": {
    "papermill": {
     "duration": 0.028473,
     "end_time": "2021-11-28T10:18:51.074061",
     "exception": false,
     "start_time": "2021-11-28T10:18:51.045588",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Importing Libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9eb28421",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:51.135739Z",
     "iopub.status.busy": "2021-11-28T10:18:51.134762Z",
     "iopub.status.idle": "2021-11-28T10:18:52.349629Z",
     "shell.execute_reply": "2021-11-28T10:18:52.349043Z",
     "shell.execute_reply.started": "2021-11-28T10:18:08.854559Z"
    },
    "papermill": {
     "duration": 1.246658,
     "end_time": "2021-11-28T10:18:52.349803",
     "exception": false,
     "start_time": "2021-11-28T10:18:51.103145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffa618b2",
   "metadata": {
    "papermill": {
     "duration": 0.028439,
     "end_time": "2021-11-28T10:18:52.407015",
     "exception": false,
     "start_time": "2021-11-28T10:18:52.378576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Reading Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "018b23bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:52.470385Z",
     "iopub.status.busy": "2021-11-28T10:18:52.469639Z",
     "iopub.status.idle": "2021-11-28T10:18:52.501083Z",
     "shell.execute_reply": "2021-11-28T10:18:52.501557Z",
     "shell.execute_reply.started": "2021-11-28T10:18:08.866311Z"
    },
    "papermill": {
     "duration": 0.066115,
     "end_time": "2021-11-28T10:18:52.501750",
     "exception": false,
     "start_time": "2021-11-28T10:18:52.435635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   63    1   3       145   233    1        0      150      0      2.3      0   \n",
       "1   37    1   2       130   250    0        1      187      0      3.5      0   \n",
       "2   41    0   1       130   204    0        0      172      0      1.4      2   \n",
       "3   56    1   1       120   236    0        1      178      0      0.8      2   \n",
       "4   57    0   0       120   354    0        1      163      1      0.6      2   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   0     1       1  \n",
       "1   0     2       1  \n",
       "2   0     2       1  \n",
       "3   0     2       1  \n",
       "4   0     2       1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"../input/heart-disease-uci/heart.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baf1e69a",
   "metadata": {
    "papermill": {
     "duration": 0.029364,
     "end_time": "2021-11-28T10:18:52.560502",
     "exception": false,
     "start_time": "2021-11-28T10:18:52.531138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Dataset Exploration "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2df9a6f0",
   "metadata": {
    "papermill": {
     "duration": 0.029189,
     "end_time": "2021-11-28T10:18:52.619129",
     "exception": false,
     "start_time": "2021-11-28T10:18:52.589940",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This section will explore the data set that has been imported."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "996527f6",
   "metadata": {
    "papermill": {
     "duration": 0.028952,
     "end_time": "2021-11-28T10:18:52.678164",
     "exception": false,
     "start_time": "2021-11-28T10:18:52.649212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**3.1 Target Distribution**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "037403b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:52.738681Z",
     "iopub.status.busy": "2021-11-28T10:18:52.738039Z",
     "iopub.status.idle": "2021-11-28T10:18:52.749983Z",
     "shell.execute_reply": "2021-11-28T10:18:52.750580Z",
     "shell.execute_reply.started": "2021-11-28T10:18:08.892767Z"
    },
    "papermill": {
     "duration": 0.04376,
     "end_time": "2021-11-28T10:18:52.750781",
     "exception": false,
     "start_time": "2021-11-28T10:18:52.707021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    165\n",
       "0    138\n",
       "Name: target, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.target.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cf3f566b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:52.813844Z",
     "iopub.status.busy": "2021-11-28T10:18:52.813099Z",
     "iopub.status.idle": "2021-11-28T10:18:53.015350Z",
     "shell.execute_reply": "2021-11-28T10:18:53.014812Z",
     "shell.execute_reply.started": "2021-11-28T10:18:08.904087Z"
    },
    "papermill": {
     "duration": 0.234978,
     "end_time": "2021-11-28T10:18:53.015537",
     "exception": false,
     "start_time": "2021-11-28T10:18:52.780559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=\"target\", data=df, palette=\"bwr\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "19eeb65e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:53.080478Z",
     "iopub.status.busy": "2021-11-28T10:18:53.079493Z",
     "iopub.status.idle": "2021-11-28T10:18:53.090425Z",
     "shell.execute_reply": "2021-11-28T10:18:53.089825Z",
     "shell.execute_reply.started": "2021-11-28T10:18:09.089091Z"
    },
    "papermill": {
     "duration": 0.044234,
     "end_time": "2021-11-28T10:18:53.090564",
     "exception": false,
     "start_time": "2021-11-28T10:18:53.046330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of patients who are not sick: 45.54%\n",
      "Percentage of patients who are sick: 54.46%\n"
     ]
    }
   ],
   "source": [
    "countNotSick = len(df[df.target == 0])\n",
    "countSick = len(df[df.target == 1])\n",
    "print(\"Percentage of patients who are not sick: {:.2f}%\".format((countNotSick / (len(df.target))*100)))\n",
    "print(\"Percentage of patients who are sick: {:.2f}%\".format((countSick / (len(df.target))*100)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "41fee826",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:53.181795Z",
     "iopub.status.busy": "2021-11-28T10:18:53.155690Z",
     "iopub.status.idle": "2021-11-28T10:18:53.328305Z",
     "shell.execute_reply": "2021-11-28T10:18:53.329185Z",
     "shell.execute_reply.started": "2021-11-28T10:18:09.100375Z"
    },
    "papermill": {
     "duration": 0.207131,
     "end_time": "2021-11-28T10:18:53.329364",
     "exception": false,
     "start_time": "2021-11-28T10:18:53.122233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='sex', data=df, palette=\"mako_r\")\n",
    "plt.xlabel(\"Gender (0 = Female, 1= Male)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "253c65de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:53.395284Z",
     "iopub.status.busy": "2021-11-28T10:18:53.394682Z",
     "iopub.status.idle": "2021-11-28T10:18:53.403369Z",
     "shell.execute_reply": "2021-11-28T10:18:53.402819Z",
     "shell.execute_reply.started": "2021-11-28T10:18:09.292543Z"
    },
    "papermill": {
     "duration": 0.042933,
     "end_time": "2021-11-28T10:18:53.403515",
     "exception": false,
     "start_time": "2021-11-28T10:18:53.360582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Female percentage: 31.68%\n",
      "Male percentage: 68.32%\n"
     ]
    }
   ],
   "source": [
    "countFemale = len(df[df.sex == 0])\n",
    "countMale = len(df[df.sex == 1])\n",
    "print(\"Female percentage: {:.2f}%\".format((countFemale/ (len(df.sex))*100)))\n",
    "print(\"Male percentage: {:.2f}%\".format((countMale  / (len(df.sex))*100)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fa23029d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:53.469952Z",
     "iopub.status.busy": "2021-11-28T10:18:53.469333Z",
     "iopub.status.idle": "2021-11-28T10:18:53.489738Z",
     "shell.execute_reply": "2021-11-28T10:18:53.489066Z",
     "shell.execute_reply.started": "2021-11-28T10:18:09.305116Z"
    },
    "papermill": {
     "duration": 0.054981,
     "end_time": "2021-11-28T10:18:53.489879",
     "exception": false,
     "start_time": "2021-11-28T10:18:53.434898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>56.601449</td>\n",
       "      <td>0.826087</td>\n",
       "      <td>0.478261</td>\n",
       "      <td>134.398551</td>\n",
       "      <td>251.086957</td>\n",
       "      <td>0.159420</td>\n",
       "      <td>0.449275</td>\n",
       "      <td>139.101449</td>\n",
       "      <td>0.550725</td>\n",
       "      <td>1.585507</td>\n",
       "      <td>1.166667</td>\n",
       "      <td>1.166667</td>\n",
       "      <td>2.543478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52.496970</td>\n",
       "      <td>0.563636</td>\n",
       "      <td>1.375758</td>\n",
       "      <td>129.303030</td>\n",
       "      <td>242.230303</td>\n",
       "      <td>0.139394</td>\n",
       "      <td>0.593939</td>\n",
       "      <td>158.466667</td>\n",
       "      <td>0.139394</td>\n",
       "      <td>0.583030</td>\n",
       "      <td>1.593939</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>2.121212</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age       sex        cp    trestbps        chol       fbs  \\\n",
       "target                                                                    \n",
       "0       56.601449  0.826087  0.478261  134.398551  251.086957  0.159420   \n",
       "1       52.496970  0.563636  1.375758  129.303030  242.230303  0.139394   \n",
       "\n",
       "         restecg     thalach     exang   oldpeak     slope        ca      thal  \n",
       "target                                                                          \n",
       "0       0.449275  139.101449  0.550725  1.585507  1.166667  1.166667  2.543478  \n",
       "1       0.593939  158.466667  0.139394  0.583030  1.593939  0.363636  2.121212  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('target').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1b56487a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:53.568810Z",
     "iopub.status.busy": "2021-11-28T10:18:53.567961Z",
     "iopub.status.idle": "2021-11-28T10:18:54.479731Z",
     "shell.execute_reply": "2021-11-28T10:18:54.479049Z",
     "shell.execute_reply.started": "2021-11-28T10:18:09.333500Z"
    },
    "papermill": {
     "duration": 0.958024,
     "end_time": "2021-11-28T10:18:54.479880",
     "exception": false,
     "start_time": "2021-11-28T10:18:53.521856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))\n",
    "plt.title('Heart Disease Frequency based on Age')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Frequency')\n",
    "plt.savefig('heartDiseaseAndAges.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "49b02192",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:54.554512Z",
     "iopub.status.busy": "2021-11-28T10:18:54.553367Z",
     "iopub.status.idle": "2021-11-28T10:18:54.788456Z",
     "shell.execute_reply": "2021-11-28T10:18:54.789028Z",
     "shell.execute_reply.started": "2021-11-28T10:18:10.269593Z"
    },
    "papermill": {
     "duration": 0.276235,
     "end_time": "2021-11-28T10:18:54.789219",
     "exception": false,
     "start_time": "2021-11-28T10:18:54.512984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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7srgITMv7M7x0AweWDOx74+TvD7JuRk82XPy9yQe2/X3re46nJvk4SOW9g9JLs3gYTa3ZHA9h8/1tCQ7ZbRg9LWujq8kOb619qWhYyzrc7RJt+7WDH5PNyd524rOq7X2H0nekcFI25Xdz+V5dgb3Fl6f5DNJXtdaO3eEc1qaozJ4aNDbM7hmizN4kMqhSa7ptnlBkvsmuaw7t09m+VOBhz0ng/tpb8kgxJ420TBdn0+AmVb3vnUBANYdVfXhJItba68dcx0vSHJka+0J46wDgH7xf6gAYIy66ZEvS3LSuGsBoF+EPQAYk+7euCUZ3IP50TGXA0DPmMYJAADQQ0b2AAAAekjYAwAA6KFZ4y5gdWy55ZZtu+22G3cZAAAAY3HRRRfd1Fqbs7S2tTrsbbfddlm4cOG4ywAAABiLqrp6WW2mcQIAAPSQsAcAANBDwh4AAEAPrdX37AEAAGun3//+91m8eHF++9vfjruUtcLs2bMzd+7crL/++iPvI+wBAAAzbvHixdl4442z3XbbparGXc4arbWWm2++OYsXL868efNG3s80TgAAYMb99re/zRZbbCHojaCqssUWW6z0KKiwBwAAjIWgN7pVuVbCHgAAsE6qqhxzzDH3LB9//PE57rjjlrvPWWedlcsuu2ypbZdffnn22muv7LLLLtlhhx1y5JFHJkkWLlyYo48+ern9brTRRitX/AjcswcAAIzdvJecPKX9/ezkl6xwmw022CCf/vSn85rXvCZbbrnlSP2eddZZOeCAA7Ljjjv+SdvRRx+dV77ylTnwwAOTJJdeemmSZMGCBVmwYMFKVD81jOwBAADrpFmzZuXII4/MCSec8CdtV111Vfbee+/Mnz8/++yzT6655pp885vfzNlnn51XvepV2WWXXfKTn/zkXvvccMMNmTt37j3LO+20U5Lk/PPPzwEHHJAkuf3223PEEUdkp512yvz58/OpT33qXn3cdNNN2XPPPfP5z39+tc9P2AMAANZZRx11VE4//fT86le/utf6l7/85Tn88MNzySWX5LnPfW6OPvroPO5xj8vTn/70vO1tb8vFF1+chzzkIffa55WvfGX23nvv7LfffjnhhBPyy1/+8k+O94Y3vCGbbrppLr300lxyySXZe++972n7xS9+kf333z+vf/3rs//++6/2uQl7AADAOmuTTTbJC17wgrzzne+81/oLL7wwz3nOc5Ikz3/+83PBBRessK8jjjgiixYtysEHH5zzzz8/e+yxR373u9/da5tzzz03Rx111D3Lm222WZLB9w7us88+eetb35p99913dU8ribAHAACs417xilfklFNOyW9+85vV7murrbbKi170onz2s5/NrFmz8oMf/GCk/WbNmpXdd98955xzzmrXcE+fU9YTAMAaZqof+MDUG+UhGjDdNt988xxyyCE55ZRT8qIXvShJ8rjHPS5nnHFGnv/85+f000/PE5/4xCTJxhtvnNtuu22p/Xzxi1/MPvvsk/XXXz8///nPc/PNN2frrbfOj370o3u22XffffOe97wn73jHO5Ikt956azbbbLNUVT74wQ/m4IMPzlve8pYce+yxq31eRvYAAIB13jHHHJObbrrpnuV3vetd+dCHPpT58+fnIx/5SE488cQkyWGHHZa3ve1t2XXXXf/kAS1f+tKX8qhHPSo777xznvKUp+Rtb3tbHvSgB91rm9e+9rW59dZb79nuvPPOu6dtvfXWy8c+9rF89atfzXvf+97VPqdqra12J+OyYMGCtnDhwnGXAQCsoYzsrfmM7K27Fi1alB122GHcZaxVlnbNquqi1tpSv9fByB4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA66w3velNeeQjH5n58+dnl112ybe//e285CUvyWWXXbbMfY477rgcf/zxM1jlqpk17gIAAABuOeQJU9rf5mdesMJtLrzwwnzuc5/L9773vWywwQa56aabctddd+Xkk/vxHZ1G9gAAgHXSDTfckC233DIbbLBBkmTLLbfMVlttlb322isLFy5Mknzxi1/Mbrvtlp133jn77LPPn/TxgQ98IPvtt1/uvPPOGa19FMIeAACwTnryk5+ca6+9Ng972MPyspe9LF/72tfu1b5kyZK89KUvzac+9al8//vfzyc+8Yl7tb/73e/O5z73uZx11lnZcMMNZ7L0kZjGCQAArJM22mijXHTRRfnGN76R8847L4ceemje/OY339P+rW99K0960pMyb968JMnmm29+T9tpp52WbbbZJmeddVbWX3/9Ga99FMIeAACwzlpvvfWy1157Za+99spOO+2UU089daT9dtppp1x88cVZvHjxPWFwTWMaJwAAsE66/PLLc8UVV9yzfPHFF2fbbbe9Z3mPPfbI17/+9fzsZz9Lktxyyy33tO266655//vfn6c//em5/vrrZ67olSDsAQAA66Tbb789hx9+eHbcccfMnz8/l112WY477rh72ufMmZOTTjopz3zmM7Pzzjvn0EMPvdf+T3jCE3L88cdn//33z0033TTD1a9YtdbGXcMqW7BgQZt4Sg4AwGTzXtKPx6f32c9Ofsm4S2BMFi1alB122GHcZaxVlnbNquqi1tqCpW1vZA8AAKCHhD0AAIAeEvYAAAB6SNgDAADGYm1+fshMW5VrJewBAAAzbvbs2bn55psFvhG01nLzzTdn9uzZK7WfL1UHAABm3Ny5c7N48eIsWbJk3KWsFWbPnp25c+eu1D7CHgAAMOPWX3/9zJs3b9xl9JppnAAAAD0k7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9NC0hb2q+mBV3VhVPxhat3lVfbmqruh+btatr6p6Z1VdWVWXVNVu01UXAADAumA6R/Y+nOSpk9a9OslXWmvbJ/lKt5wk+yXZvnsdmeR901gXAABA701b2GutfT3JLZNWH5jk1O79qUkOGlp/Whv4VpIHVNWDp6s2AACAvpvpe/Ye2Fq7oXv/8yQP7N5vneTaoe0Wd+v+RFUdWVULq2rhkiVLpq9SAACAtdjYHtDSWmtJ2irsd1JrbUFrbcGcOXOmoTIAAIC130yHvV9MTM/sft7Yrb8uyTZD283t1gEAALAKZjrsnZ3k8O794Uk+O7T+Bd1TOfdI8quh6Z4AAACspFnT1XFVfSzJXkm2rKrFSV6X5M1JzqyqFye5Oskh3eZfSPLfklyZ5I4kR0xXXQAAAOuCaQt7rbVnL6Npn6Vs25IcNV21AAAArGvG9oAWAAAApo+wBwAA0EPCHgAAQA8JewAAAD0k7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9NCscRcAAMC665ZDnjDuEliOzc+8YNwlsBqM7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9JCwBwAA0EPCHgAAQA8JewAAAD0k7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9JCwBwAA0EPCHgAAQA8JewAAAD0k7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABAD40l7FXVK6vqh1X1g6r6WFXNrqp5VfXtqrqyqj5eVfcdR20AAAB9MONhr6q2TnJ0kgWttUclWS/JYUnekuSE1tpDk9ya5MUzXRsAAEBfjGsa56wkG1bVrCT3S3JDkr2TfLJrPzXJQeMpDQAAYO0342GvtXZdkuOTXJNByPtVkouS/LK1dne32eIkW890bQAAAH0xjmmcmyU5MMm8JFsluX+Sp67E/kdW1cKqWrhkyZJpqhIAAGDtNo5pnH+d5GettSWttd8n+XSSxyd5QDetM0nmJrluaTu31k5qrS1orS2YM2fOzFQMAACwlhlH2LsmyR5Vdb+qqiT7JLksyXlJntVtc3iSz46hNgAAgF4Yxz17387gQSzfS3JpV8NJSY5N8vdVdWWSLZKcMtO1AQAA9MWsFW8y9Vprr0vyukmrf5rkMWMoBwAAoHfG9dULAAAATCNhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOghYQ8AAKCHhD0AAIAeEvYAAAB6SNgDAADoIWEPAACgh4Q9AACAHhL2AAAAekjYAwAA6CFhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOihWeMuABifWw55wrhLYAU2P/OCcZcAAKyljOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9JCwBwAA0EPCHgAAQA8JewAAAD00Utirqp2muxAAAACmzqgje++tqu9U1cuqatNprQgAAIDVNlLYa609Mclzk2yT5KKq+mhV7TutlQEAALDKRr5nr7V2RZLXJjk2yV8meWdV/aiqnjldxQEAALBqRr1nb35VnZBkUZK9kzyttbZD9/6EaawPAACAVTBrxO3eleTkJP/UWrtzYmVr7fqqeu20VAYAAMAqGzXs7Z/kztbaH5Kkqu6TZHZr7Y7W2kemrToAAABWyaj37J2bZMOh5ft16wAAAFgDjRr2ZrfWbp9Y6N7fb3pKAgAAYHWNGvZ+U1W7TSxU1e5J7lzO9gAAAIzRqPfsvSLJJ6rq+iSV5EFJDp2uogAAAFg9I4W91tp3q+oRSR7erbq8tfb76SsLAACA1THqyF6SPDrJdt0+u1VVWmunTUtVAAAArJaRwl5VfSTJQ5JcnOQP3eqWRNgDAABYA406srcgyY6ttTadxQAAADA1Rn0a5w8yeCgLAAAAa4FRR/a2THJZVX0nye8mVrbWnj4tVQEAALBaRg17x01nEQAAAEytUb964WtVtW2S7Vtr51bV/ZKsN72lAQAAsKpGumevql6a5JNJ3t+t2jrJWdNUEwAAAKtp1Ae0HJXk8Ul+nSSttSuS/NmqHrSqHlBVn6yqH1XVoqras6o2r6ovV9UV3c/NVrV/AACAdd2oYe93rbW7JhaqalYG37O3qk5M8sXW2iOS7JxkUZJXJ/lKa237JF/plgEAAFgFo4a9r1XVPyXZsKr2TfKJJP93VQ5YVZsmeVKSU5KktXZXa+2XSQ5Mcmq32alJDlqV/gEAABg97L06yZIklyb52yRfSPLaVTzmvK6vD1XVf1bVyVV1/yQPbK3d0G3z8yQPXNrOVXVkVS2sqoVLlixZxRIAAAD6baSw11r7Y2vtA621g1trz+rer+o0zllJdkvyvtbarkl+k0lTNru+l9p/a+2k1tqC1tqCOXPmrGIJAAAA/TbSVy9U1c+ylPDVWvuLVTjm4iSLW2vf7pY/mUHY+0VVPbi1dkNVPTjJjavQNwAAABn9S9UXDL2fneTgJJuvygFbaz+vqmur6uGttcuT7JPksu51eJI3dz8/uyr9AwAAMPqXqt88adU7quqiJP+8isd9eZLTq+q+SX6a5IgMppSeWVUvTnJ1kkNWsW8AAIB13qjTOHcbWrxPBiN9o44K/onW2sW592jhhH1WtU8AAAD+y6iB7V+H3t+d5KoYeQMAAFhjjTqN86+muxAAAACmzqjTOP9+ee2ttbdPTTkAAABMhZV5Guejk5zdLT8tyXeSXDEdRQEAALB6Rg17c5Ps1lq7LUmq6rgkn2+tPW+6CgMAAGDV3WfE7R6Y5K6h5bu6dQAAAKyBRh3ZOy3Jd6rqM93yQUlOnZaKAAAAWG2jPo3zTVX1H0me2K06orX2n9NXFgAAAKtj1GmcSXK/JL9urZ2YZHFVzZummgAAAFhNI4W9qnpdkmOTvKZbtX6Sf5+uogAAAFg9o47sPSPJ05P8Jklaa9cn2Xi6igIAAGD1jBr27mqttSQtSarq/tNXEgAAAKtr1LB3ZlW9P8kDquqlSc5N8oHpKwsAAIDVscKncVZVJfl4kkck+XWShyf559bal6e5NgAAAFbRCsNea61V1RdaazslEfAAAADWAqNO4/xeVT16WisBAABgyoz0pepJHpvkeVV1VQZP5KwMBv3mT1dhAAAArLrlhr2q+vPW2jVJnjJD9QAAADAFVjSyd1aS3VprV1fVp1prfzMDNQEAALCaVnTPXg29/4vpLAQAAICps6Kw15bxHgAAgDXYiqZx7lxVv85ghG/D7n3yXw9o2WRaqwMAAGCVLDfstdbWm6lCAAAAmDqjfs8eAAAAaxFhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOghYQ8AAKCHhD0AAIAeEvYAAAB6SNgDAADoIWEPAACgh4Q9AACAHhL2AAAAekjYAwAA6CFhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOghYQ8AAKCHhD0AAIAeEvYAAAB6SNgDAADoIWEPAACgh8YW9qpqvar6z6r6XLc8r6q+XVVXVtXHq+q+46oNAABgbTfOkb3/mWTR0PJbkpzQWntokluTvHgsVQEAAPTAWMJeVc1Nsn+Sk7vlSrJ3kk92m5ya5KBx1AYAANAH4xrZe0eSf0zyx255iyS/bK3d3S0vTrL1GOoCAADohRkPe1V1QJIbW2sXreL+R1bVwqpauGTJkimuDgAAoB/GMbL3+CRPr6qrkpyRwfTNE5M8oKpmddvMTXLd0nZurZ3UWlvQWlswZ86cmagXAABgrTPjYa+19prW2tzW2nZJDkvy1dbac5Ocl+RZ3WaHJ/nsTNcGAADQF2vS9+wdm+Tvq+rKDO7hO2XM9QAAAKy1Zq14k+nTWjs/yfnd+58mecw46wEAAOiLNWlkDwAAgCki7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9JCwBwAA0EPCHgAAQA8JewAAAD0k7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9JCwBwAA0EPCHgAAQA8JewAAAD0k7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9JCwBwAA0EPCHgAAQA8JewAAAD0k7AEAAPTQrHEXQL/Ne8nJ4y6B5bho3AUAADBtjOwBAAD0kLAHAADQQ8IeAABADwl7AAAAPSTsAQAA9JCwBwAA0EPCHgAAQA/NeNirqm2q6ryquqyqflhV/7Nbv3lVfbmqruh+bjbTtQEAAPTFOEb27k5yTGttxyR7JDmqqnZM8uokX2mtbZ/kK90yAAAAq2DGw15r7YbW2ve697clWZRk6yQHJjm12+zUJAfNdG0AAAB9MdZ79qpquyS7Jvl2kge21m7omn6e5IHL2OfIqlpYVQuXLFkyM4UCAACsZcYW9qpqoySfSvKK1tqvh9taay1JW9p+rbWTWmsLWmsL5syZMwOVAgAArH3GEvaqav0Mgt7prbVPd6t/UVUP7tofnOTGcdQGAADQB+N4GmclOSXJotba24eazk5yePf+8CSfnenaAAAA+mLWGI75+CTPT3JpVV3crfunJG9OcmZVvTjJ1UkOGUNtAAAAvTDjYa+1dkGSWkbzPjNZCwAAQF+N9WmcAAAATA9hDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOghYQ8AAKCHhD0AAIAeEvYAAAB6SNgDAADoIWEPAACgh4Q9AACAHhL2AAAAekjYAwAA6CFhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOghYQ8AAKCHhD0AAIAeEvYAAAB6SNgDAADoIWEPAACgh4Q9AACAHhL2AAAAekjYAwAA6CFhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOghYQ8AAKCHhD0AAIAeEvYAAAB6SNgDAADoIWEPAACgh4Q9AACAHhL2AAAAekjYAwAA6CFhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOghYQ8AAKCHhD0AAIAeEvYAAAB6SNgDAADooTUq7FXVU6vq8qq6sqpePe56AAAA1lZrTNirqvWSvCfJfkl2TPLsqtpxvFUBAACsndaYsJfkMUmubK39tLV2V5Izkhw45poAAADWSmtS2Ns6ybVDy4u7dQAAAKykWeMuYGVV1ZFJjuwWb6+qy8dZD6zNtki2THLTuOtgOarGXQHAtPJ30RrO30Nrg22X1bAmhb3rkmwztDy3W3cvrbWTkpw0U0VBn1XVwtbagnHXAcC6y99FMH3WpGmc302yfVXNq6r7JjksydljrgkAAGCttMaM7LXW7q6qv0tyTpL1knywtfbDMZcFAACwVlpjwl6StNa+kOQL464D1iGmRAMwbv4ugmlSrbVx1wAAAMAUW5Pu2QMAAGCKCHuwjqqqp1bV5VV1ZVW9etz1ALBuqaoPVtWNVfWDcdcCfSXswTqoqtZL8p4k+yXZMcmzq2rH8VYFwDrmw0meOu4ioM+EPVg3PSbJla21n7bW7kpyRpIDx1wTAOuQ1trXk9wy7jqgz4Q9WDdtneTaoeXF3ToAAHpC2AMAAOghYQ/WTdcl2WZoeW63DgCAnhD2YN303STbV9W8qrpvksOSnD3mmgAAmELCHqyDWmt3J/m7JOckWZTkzNbaD8dbFQDrkqr6WJILkzy8qhZX1YvHXRP0TbXWxl0DAAAAU8zIHgAAQA8JewAAAD0k7AEAAPSQsAcAANBDwh4AAEAPCXsAAAA9JOwBsFKq6n9V1Q+r6pKquriqHjtF/X6yqv6ie797VV1aVVdW1Turqqag/z909U68tlvtopd9rKuqastV3Pfg7vr+saoWTFE9H66qO6pq46F176iqtqI6RzmXqjq3qjabiloBmDrCHgAjq6o9kxyQZLfW2vwkf53k2ino95FJ1mut/bRb9b4kL02yffd66uoeI8mdrbVdhl5XTUGf0+EHSZ6Z5OtT3O+VSQ5Mkqq6T5K9k1w3RX1/JMnLpqgvAKaIsAfAynhwkptaa79LktbaTa2165N7RuO+VlUXVdU5VfXgqtq0qi6vqod323ysql66lH6fm+Sz3TYPTrJJa+1brbWW5LQkB03HySyt5m79+VV1QlUtrKpFVfXoqvp0VV1RVW8c2v+sbt8fVtWRyzjG86rqO91o4vurar3l1dRaW9Rau3xqzzRJckaSQ7v3eyX5f0nuHqpzdc7l7CTPnoaaAVgNwh4AK+NLSbapqh9X1Xur6i+TpKrWT/KuJM9qre2e5INJ3tRa+1WSv0vy4ao6LMlmrbUPLKXfxye5qHu/dZLFQ22Lu3X3UlXPnTQtc+L1yWXUvuHQNp9ZVs1D29/VWluQ5N8yCKJHJXlUkhdW1RbdNi/q9l2Q5Oih9RM17pBBwHp8a22XJH/IINiulqraeBnnfnFV7biM3X6cZE433fLZGYS/Yat8Lq21W5NsMHkfAMZr1rgLAGDt0Vq7vap2T/LEJH+V5ONV9eokCzMIQl/ubq9bL8kN3T5frqqDk7wnyc7L6PrBSZasZC2nJzl9JXa5swspSZKqetSyau6c3f28NMkPW2s3dPv9NMk2SW7OIBQ9o9tumwymnN481Mc+SXZP8t3uGBsmuXElal6q1tptSXZZ0XZL8ekkhyV5bJK/ndS2uudyY5KtJu0DwBgJewCslNbaH5Kcn+T8qro0yeEZjMr9sLW25+Ttu/vDdkhyR5LNcu9Ruwl3Jpndvb8uydyhtrlZyr1lVfXcJK9aSl9XttaeNcKp1LJq7vyu+/nHofcTy7Oqaq8M7lncs7V2R1WdP3QOw8c4tbX2mhHqGVn3oJVvLKP5Oa21y5bR9vEMflenttb+OPHcmyk6l9kZ/B4BWEOYxgnAyKrq4VW1/dCqXZJcneTyDKYI7tltt3730JUkeWWSRUmek+RD3fTJyRYleWiSdCNov66qPbqncL4g3f18w1prp0964MrEa5SglxXUPIpNk9zahaNHJNljKdt8JcmzqurPumNsXlXbdu9Pq6rHrMTx7tFau20Z577LcoJeWmtXJ/lfSd47xedSSR6U5KpVOR8ApoewB8DK2CjJqVV1WVVdkmTHJMe11u5K8qwkb6mq7ye5OMnjugezvCTJMa21b2TwhMnXLqXfz2fw0JAJL0tycgZPkPxJkv+Y6hNZVs0r0cUXMxjhW5TkzUm+tZRjXJbB+X6pu15fzmDKapLMT3L95H2q6hlVtTjJnkk+X1XnrERNK9Rae39r7SeTVq/uueye5Futtbsn7wfA+NTgQWcAMD5VtWGS8zJ4+Mcfxl3PdKuqTZKc0lo7eNy1TIWqOjHJ2a21r4y7FgD+i7AHwBqhqp6SZFFr7Zpx18LKqaqXLuMpqwCMkbAHAADQQ+7ZAwAA6CFhDwAAoIeEPQAAgB4S9gAAAHpI2AMAAOih/x9izfsgpJlrsAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#20639B','#ED553B' ])\n",
    "plt.title('Heart Disease Frequency based on Gender')\n",
    "plt.xlabel('Sex (0 = Female, 1 = Male)')\n",
    "plt.xticks(rotation=0)\n",
    "plt.legend([\"Not Sick\", \"Sick\"])\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b2dcc38c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:54.883544Z",
     "iopub.status.busy": "2021-11-28T10:18:54.882502Z",
     "iopub.status.idle": "2021-11-28T10:18:55.136818Z",
     "shell.execute_reply": "2021-11-28T10:18:55.137499Z",
     "shell.execute_reply.started": "2021-11-28T10:18:10.512342Z"
    },
    "papermill": {
     "duration": 0.313811,
     "end_time": "2021-11-28T10:18:55.137799",
     "exception": false,
     "start_time": "2021-11-28T10:18:54.823988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\n",
    "plt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)], c=\"green\")\n",
    "plt.legend([\"Sick\", \"Not Sick\"])\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Heart Rate Max\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "beec5504",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:55.225727Z",
     "iopub.status.busy": "2021-11-28T10:18:55.221292Z",
     "iopub.status.idle": "2021-11-28T10:18:55.468707Z",
     "shell.execute_reply": "2021-11-28T10:18:55.467448Z",
     "shell.execute_reply.started": "2021-11-28T10:18:10.768461Z"
    },
    "papermill": {
     "duration": 0.295057,
     "end_time": "2021-11-28T10:18:55.468910",
     "exception": false,
     "start_time": "2021-11-28T10:18:55.173853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#6C5B7B','#F8B195' ])\n",
    "plt.title('Heart Disease Frequency based on Slope')\n",
    "plt.xlabel('The Slope of The Peak Exercise ST Segment ')\n",
    "plt.xticks(rotation = 0)\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "322c6896",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:55.548249Z",
     "iopub.status.busy": "2021-11-28T10:18:55.547566Z",
     "iopub.status.idle": "2021-11-28T10:18:55.797304Z",
     "shell.execute_reply": "2021-11-28T10:18:55.796670Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.206372Z"
    },
    "papermill": {
     "duration": 0.288333,
     "end_time": "2021-11-28T10:18:55.797440",
     "exception": false,
     "start_time": "2021-11-28T10:18:55.509107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#009999','#00FF00' ])\n",
    "plt.title('Heart Disease Frequency According To FBS')\n",
    "plt.xlabel('FBS > 120 mg/dl (1 = true; 0 = false)')\n",
    "plt.xticks(rotation = 0)\n",
    "plt.legend([\"Not Sick\", \"Sick\"])\n",
    "plt.ylabel('Frequency Sick/Not Sick')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "caa42f12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:55.880863Z",
     "iopub.status.busy": "2021-11-28T10:18:55.879851Z",
     "iopub.status.idle": "2021-11-28T10:18:56.125400Z",
     "shell.execute_reply": "2021-11-28T10:18:56.125953Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.462386Z"
    },
    "papermill": {
     "duration": 0.292276,
     "end_time": "2021-11-28T10:18:56.126121",
     "exception": false,
     "start_time": "2021-11-28T10:18:55.833845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(df.cp,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#0000CC','#FFFF99' ])\n",
    "plt.title('Heart Disease Frequency According To Chest Pain Type')\n",
    "plt.xlabel('Chest Pain Type')\n",
    "plt.xticks(rotation = 0)\n",
    "plt.ylabel('Frequency Sick/Not Sick')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c547950e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:56.207337Z",
     "iopub.status.busy": "2021-11-28T10:18:56.203834Z",
     "iopub.status.idle": "2021-11-28T10:18:56.226782Z",
     "shell.execute_reply": "2021-11-28T10:18:56.227280Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.721180Z"
    },
    "papermill": {
     "duration": 0.064384,
     "end_time": "2021-11-28T10:18:56.227459",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.163075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>...</th>\n",
       "      <th>cp_1</th>\n",
       "      <th>cp_2</th>\n",
       "      <th>cp_3</th>\n",
       "      <th>thal_0</th>\n",
       "      <th>thal_1</th>\n",
       "      <th>thal_2</th>\n",
       "      <th>thal_3</th>\n",
       "      <th>slope_0</th>\n",
       "      <th>slope_1</th>\n",
       "      <th>slope_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  ...  \\\n",
       "0   63    1   3       145   233    1        0      150      0      2.3  ...   \n",
       "1   37    1   2       130   250    0        1      187      0      3.5  ...   \n",
       "2   41    0   1       130   204    0        0      172      0      1.4  ...   \n",
       "3   56    1   1       120   236    0        1      178      0      0.8  ...   \n",
       "4   57    0   0       120   354    0        1      163      1      0.6  ...   \n",
       "\n",
       "   cp_1  cp_2  cp_3  thal_0  thal_1  thal_2  thal_3  slope_0  slope_1  slope_2  \n",
       "0     0     0     1       0       1       0       0        1        0        0  \n",
       "1     0     1     0       0       0       1       0        1        0        0  \n",
       "2     1     0     0       0       0       1       0        0        0        1  \n",
       "3     1     0     0       0       0       1       0        0        0        1  \n",
       "4     0     0     0       0       0       1       0        0        0        1  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = pd.get_dummies(df['cp'], prefix = \"cp\")\n",
    "b = pd.get_dummies(df['thal'], prefix = \"thal\")\n",
    "c = pd.get_dummies(df['slope'], prefix = \"slope\")\n",
    "\n",
    "frames = [df, a, b, c]\n",
    "df = pd.concat(frames, axis = 1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "eaffd3b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:56.305518Z",
     "iopub.status.busy": "2021-11-28T10:18:56.304519Z",
     "iopub.status.idle": "2021-11-28T10:18:56.323790Z",
     "shell.execute_reply": "2021-11-28T10:18:56.324287Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.747812Z"
    },
    "papermill": {
     "duration": 0.059679,
     "end_time": "2021-11-28T10:18:56.324463",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.264784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>ca</th>\n",
       "      <th>...</th>\n",
       "      <th>cp_1</th>\n",
       "      <th>cp_2</th>\n",
       "      <th>cp_3</th>\n",
       "      <th>thal_0</th>\n",
       "      <th>thal_1</th>\n",
       "      <th>thal_2</th>\n",
       "      <th>thal_3</th>\n",
       "      <th>slope_0</th>\n",
       "      <th>slope_1</th>\n",
       "      <th>slope_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  ca  ...  \\\n",
       "0   63    1       145   233    1        0      150      0      2.3   0  ...   \n",
       "1   37    1       130   250    0        1      187      0      3.5   0  ...   \n",
       "2   41    0       130   204    0        0      172      0      1.4   0  ...   \n",
       "3   56    1       120   236    0        1      178      0      0.8   0  ...   \n",
       "4   57    0       120   354    0        1      163      1      0.6   0  ...   \n",
       "\n",
       "   cp_1  cp_2  cp_3  thal_0  thal_1  thal_2  thal_3  slope_0  slope_1  slope_2  \n",
       "0     0     0     1       0       1       0       0        1        0        0  \n",
       "1     0     1     0       0       0       1       0        1        0        0  \n",
       "2     1     0     0       0       0       1       0        0        0        1  \n",
       "3     1     0     0       0       0       1       0        0        0        1  \n",
       "4     0     0     0       0       0       1       0        0        0        1  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(columns = ['cp', 'thal', 'slope'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c39f5ead",
   "metadata": {
    "papermill": {
     "duration": 0.037742,
     "end_time": "2021-11-28T10:18:56.400349",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.362607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4.Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4bc2347d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:56.482190Z",
     "iopub.status.busy": "2021-11-28T10:18:56.481418Z",
     "iopub.status.idle": "2021-11-28T10:18:56.492230Z",
     "shell.execute_reply": "2021-11-28T10:18:56.492700Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.773405Z"
    },
    "papermill": {
     "duration": 0.054965,
     "end_time": "2021-11-28T10:18:56.492871",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.437906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y = df.target.values\n",
    "x_data = df.drop(['target'], axis = 1)\n",
    "\n",
    "#Normalization\n",
    "x = (x_data - np.min(x_data)) / (np.max(x_data) - np.min(x_data)).values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d6e89333",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:56.572818Z",
     "iopub.status.busy": "2021-11-28T10:18:56.571834Z",
     "iopub.status.idle": "2021-11-28T10:18:56.595046Z",
     "shell.execute_reply": "2021-11-28T10:18:56.595556Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.789195Z"
    },
    "papermill": {
     "duration": 0.065019,
     "end_time": "2021-11-28T10:18:56.595768",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.530749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy 86.89%\n",
      "0.36267273399983196\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import log_loss\n",
    "lr = LogisticRegression()\n",
    "lr.fit(x_train,y_train)\n",
    "print(\"Test Accuracy {:.2f}%\".format(lr.score(x_test,y_test)*100))\n",
    "probs = lr.predict_proba(x_test)\n",
    "print(log_loss(y_test, probs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "00486a57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:56.679773Z",
     "iopub.status.busy": "2021-11-28T10:18:56.678972Z",
     "iopub.status.idle": "2021-11-28T10:18:56.750832Z",
     "shell.execute_reply": "2021-11-28T10:18:56.750239Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.824469Z"
    },
    "papermill": {
     "duration": 0.11615,
     "end_time": "2021-11-28T10:18:56.750988",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.634838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 NN Score: 77.05%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn = KNeighborsClassifier(n_neighbors = 2)\n",
    "knn.fit(x_train, y_train)\n",
    "prediction = knn.predict(x_test)\n",
    "print(\"{} NN Score: {:.2f}%\".format(2, knn.score(x_test, y_test)*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6d484461",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:56.837540Z",
     "iopub.status.busy": "2021-11-28T10:18:56.836501Z",
     "iopub.status.idle": "2021-11-28T10:18:56.841997Z",
     "shell.execute_reply": "2021-11-28T10:18:56.842522Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.917316Z"
    },
    "papermill": {
     "duration": 0.052492,
     "end_time": "2021-11-28T10:18:56.842712",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.790220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.948615855033621\n"
     ]
    }
   ],
   "source": [
    "probs = knn.predict_proba(x_test)\n",
    "print(log_loss(y_test, probs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bea66aed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:56.924219Z",
     "iopub.status.busy": "2021-11-28T10:18:56.923467Z",
     "iopub.status.idle": "2021-11-28T10:18:57.344621Z",
     "shell.execute_reply": "2021-11-28T10:18:57.344018Z",
     "shell.execute_reply.started": "2021-11-28T10:18:11.928488Z"
    },
    "papermill": {
     "duration": 0.462786,
     "end_time": "2021-11-28T10:18:57.344773",
     "exception": false,
     "start_time": "2021-11-28T10:18:56.881987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Score Max 88.52%\n"
     ]
    }
   ],
   "source": [
    "scoreList = []\n",
    "for i in range(1,25):\n",
    "    knn2 = KNeighborsClassifier(n_neighbors = i)\n",
    "    knn2.fit(x_train, y_train)\n",
    "    scoreList.append(knn2.score(x_test, y_test))\n",
    "    \n",
    "plt.plot(range(1,25), scoreList)\n",
    "plt.xticks(np.arange(1,25,1))\n",
    "plt.xlabel(\"K value\")\n",
    "plt.ylabel(\"Score\")\n",
    "plt.show()\n",
    "print(\"KNN Score Max {:.2f}%\".format((max(scoreList))*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8d3b541c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:57.433117Z",
     "iopub.status.busy": "2021-11-28T10:18:57.432410Z",
     "iopub.status.idle": "2021-11-28T10:18:57.442446Z",
     "shell.execute_reply": "2021-11-28T10:18:57.441802Z",
     "shell.execute_reply.started": "2021-11-28T10:18:12.381120Z"
    },
    "papermill": {
     "duration": 0.057227,
     "end_time": "2021-11-28T10:18:57.442583",
     "exception": false,
     "start_time": "2021-11-28T10:18:57.385356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(random_state=1)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "svm = SVC(random_state = 1)\n",
    "svm.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1485260a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:57.528129Z",
     "iopub.status.busy": "2021-11-28T10:18:57.527470Z",
     "iopub.status.idle": "2021-11-28T10:18:57.534910Z",
     "shell.execute_reply": "2021-11-28T10:18:57.535369Z",
     "shell.execute_reply.started": "2021-11-28T10:18:12.397902Z"
    },
    "papermill": {
     "duration": 0.05146,
     "end_time": "2021-11-28T10:18:57.535554",
     "exception": false,
     "start_time": "2021-11-28T10:18:57.484094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM ALgorithm Test Accuracy: 88.52%\n"
     ]
    }
   ],
   "source": [
    "print(\"SVM ALgorithm Test Accuracy: {:.2f}%\".format(svm.score(x_test,y_test)*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f733d70b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:57.681164Z",
     "iopub.status.busy": "2021-11-28T10:18:57.680473Z",
     "iopub.status.idle": "2021-11-28T10:18:57.693391Z",
     "shell.execute_reply": "2021-11-28T10:18:57.692598Z",
     "shell.execute_reply.started": "2021-11-28T10:18:12.409128Z"
    },
    "papermill": {
     "duration": 0.059741,
     "end_time": "2021-11-28T10:18:57.693566",
     "exception": false,
     "start_time": "2021-11-28T10:18:57.633825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Gaussian Naive Bayes: 86.89%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "nbg = GaussianNB()\n",
    "nbg.fit(x_train, y_train)\n",
    "print(\"Accuracy of Gaussian Naive Bayes: {:.2f}%\".format(nbg.score(x_test,y_test)*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2d7b4bce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:57.781981Z",
     "iopub.status.busy": "2021-11-28T10:18:57.781293Z",
     "iopub.status.idle": "2021-11-28T10:18:57.812873Z",
     "shell.execute_reply": "2021-11-28T10:18:57.813471Z",
     "shell.execute_reply.started": "2021-11-28T10:18:12.426760Z"
    },
    "papermill": {
     "duration": 0.078499,
     "end_time": "2021-11-28T10:18:57.813658",
     "exception": false,
     "start_time": "2021-11-28T10:18:57.735159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Test Accuracy 77.05%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dtc = DecisionTreeClassifier()\n",
    "dtc.fit(x_train, y_train)\n",
    "print(\"Decision Tree Test Accuracy {:.2f}%\".format(dtc.score(x_test, y_test)*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "20bc194b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:57.907756Z",
     "iopub.status.busy": "2021-11-28T10:18:57.901083Z",
     "iopub.status.idle": "2021-11-28T10:18:58.228012Z",
     "shell.execute_reply": "2021-11-28T10:18:58.228503Z",
     "shell.execute_reply.started": "2021-11-28T10:18:12.472887Z"
    },
    "papermill": {
     "duration": 0.372437,
     "end_time": "2021-11-28T10:18:58.228695",
     "exception": false,
     "start_time": "2021-11-28T10:18:57.856258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DT Score Max 85.25%\n"
     ]
    }
   ],
   "source": [
    "scoreListDT = []\n",
    "for i in range(2,25):\n",
    "    dtc2 = DecisionTreeClassifier(max_leaf_nodes=i)\n",
    "    dtc2.fit(x_train, y_train)\n",
    "    scoreListDT.append(dtc2.score(x_test, y_test))\n",
    "    \n",
    "plt.plot(range(2,25), scoreListDT)\n",
    "plt.xticks(np.arange(2,25,1))\n",
    "plt.xlabel(\"Leaf\")\n",
    "plt.ylabel(\"Score\")\n",
    "plt.show()\n",
    "print(\"DT Score Max {:.2f}%\".format((max(scoreListDT))*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5674634a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:18:58.316687Z",
     "iopub.status.busy": "2021-11-28T10:18:58.316064Z",
     "iopub.status.idle": "2021-11-28T10:19:00.367830Z",
     "shell.execute_reply": "2021-11-28T10:19:00.368476Z",
     "shell.execute_reply.started": "2021-11-28T10:18:12.809986Z"
    },
    "papermill": {
     "duration": 2.097586,
     "end_time": "2021-11-28T10:19:00.368704",
     "exception": false,
     "start_time": "2021-11-28T10:18:58.271118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Algorithm Accuracy Score : 88.52%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\n",
    "rf.fit(x_train, y_train)\n",
    "print(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(rf.score(x_test,y_test)*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c512c34f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:19:00.459143Z",
     "iopub.status.busy": "2021-11-28T10:19:00.458497Z",
     "iopub.status.idle": "2021-11-28T10:19:45.544733Z",
     "shell.execute_reply": "2021-11-28T10:19:45.544159Z"
    },
    "papermill": {
     "duration": 45.132417,
     "end_time": "2021-11-28T10:19:45.544873",
     "exception": false,
     "start_time": "2021-11-28T10:19:00.412456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RF Score Max 90.16%\n"
     ]
    }
   ],
   "source": [
    "scoreListRF = []\n",
    "for i in range(2,25):\n",
    "    rf2 = RandomForestClassifier(n_estimators = 1000, random_state = 1, max_leaf_nodes=i)\n",
    "    rf2.fit(x_train, y_train)\n",
    "    scoreListRF.append(rf2.score(x_test, y_test))\n",
    "    \n",
    "plt.plot(range(2,25), scoreListRF)\n",
    "plt.xticks(np.arange(2,25,1))\n",
    "plt.xlabel(\"Leaf\")\n",
    "plt.ylabel(\"Score\")\n",
    "plt.show()\n",
    "print(\"RF Score Max {:.2f}%\".format((max(scoreListRF))*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2403827a",
   "metadata": {
    "papermill": {
     "duration": 0.045066,
     "end_time": "2021-11-28T10:19:45.634732",
     "exception": false,
     "start_time": "2021-11-28T10:19:45.589666",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5.Accuracy and Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "51edb98c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-28T10:19:45.736753Z",
     "iopub.status.busy": "2021-11-28T10:19:45.736049Z",
     "iopub.status.idle": "2021-11-28T10:19:45.739444Z",
     "shell.execute_reply": "2021-11-28T10:19:45.739999Z"
    },
    "papermill": {
     "duration": 0.06044,
     "end_time": "2021-11-28T10:19:45.740175",
     "exception": false,
     "start_time": "2021-11-28T10:19:45.679735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>90.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KNN</td>\n",
       "      <td>88.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SVM</td>\n",
       "      <td>88.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>86.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gaussian NB</td>\n",
       "      <td>86.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>85.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Model  Accuracy\n",
       "5        Random Forest     90.16\n",
       "1                  KNN     88.52\n",
       "2                  SVM     88.52\n",
       "0  Logistic Regression     86.89\n",
       "3          Gaussian NB     86.89\n",
       "4        Decision Tree     85.25"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compare = pd.DataFrame({'Model': [\"Logistic Regression\", \"KNN\", \"SVM\", \"Gaussian NB\", \"Decision Tree\", \"Random Forest\"], \n",
    "                        'Accuracy': [86.89, 88.52, 88.52, 86.89, 85.25, 90.16]})\n",
    "compare.sort_values(by='Accuracy', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aed23294",
   "metadata": {
    "papermill": {
     "duration": 0.046446,
     "end_time": "2021-11-28T10:19:45.832316",
     "exception": false,
     "start_time": "2021-11-28T10:19:45.785870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 64.448358,
   "end_time": "2021-11-28T10:19:46.587263",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-11-28T10:18:42.138905",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
